package API.Generate_Config.Config;

import API.Varibles_Java.Variables;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;

import static API.ConfigAPI.ReadConfig.found_data_in_config;
import static API.Varibles_Java.Variables.*;

public class ConifgGenerator {
    public static String get_action( String start, String end, String find_value) throws IOException {
        int action_index=found_data_in_config(start,end).get(0).indexOf(find_value);
        return found_data_in_config(start, end).get(1).get(action_index);
    }
    static String Dir_Check() {
        File Dir= new File(Drone_Path + "//DroneCore");
        if(Dir.exists()) {
            return Dir.getAbsolutePath();
        }
        else {
            Dir.mkdirs();
            return Dir.getAbsolutePath();
        }
    }
    public static ArrayList<String> ConifgGenerator() throws IOException {
        /*
        1) is an drone frame
        2) is an drone controller
        3) is an drone accelerometer
        4) is drone motors
        5) is a drone props
        6) is a drone name >
        7) is baro support >
        8) is suto-level >
        9) is ultrasonics support >
         */

            ArrayList<String> config_file= new ArrayList<>();
            config_file.add("Drone Conifg file. autogenerated at "+ new Date().toString());
            config_file.add("#define FRAME_SIZE_OF_DRONE "+Variables.Frame_Size );
            config_file.add( get_action("ACCELEROMETERS:{","ACCELEROMETERS];", Variables.Drone_Accelerometer));
            config_file.add( get_action("BAROMETERS:{","BAROMETERS];", Variables.Drone_Baro));
            config_file.add( get_action("GYROS:{","GYROS];", Drone_Gyro));
            config_file.add("#define MOTOR_SIZE "+ Variables.Motors_Size);
            config_file.add("#define PROPELLER_SIZE "+ Props_Size);
            config_file.add("#define DRONE_NAME "+Variables.Drone_Name);
            config_file.add("boolean BARO_SUPPORT= "+ Variables.barometr +";");
            config_file.add("boolean ULTRASONICS_SUPPORT= "+ Variables.ultrosonics +";");
            config_file.add("boolean ULTRASONICS_SUPPORT= "+ Variables.AutoLevel +";");
            return config_file;



}
    static void String_SaveArrayList_as_File(String path, ArrayList<String> list) throws IOException {
        FileWriter writer = new FileWriter(path);
        for(String str: list) {
            writer.write(str + System.lineSeparator());
        }
        writer.close();

    }
 public static void      generate_config_file() throws IOException {
     String core_path=Dir_Check()+"//Config.h";
     String_SaveArrayList_as_File(core_path, ConifgGenerator());



 }









        }




